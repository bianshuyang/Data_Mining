# -*- coding: utf-8 -*-
"""CS470.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UhK3wPG-KFUYDVEckacVPWKYBkE-6rMC

**Combining different parts and outputing combined.csv**
"""

from google.colab import drive
import os
import pandas as pd
import numpy as np

# Mount the drive
drive.mount('/content/drive')

# Get the current working directory
cwd = os.path.abspath('/content/drive/MyDrive/CS 470 data')

# List all the files from the directory, filtering out directories
file_list = [f for f in os.listdir(cwd) if os.path.isfile(os.path.join(cwd, f))]

# Concatenate the DataFrames from each file, ignoring directories
df_concat = pd.concat([pd.read_csv(os.path.join(cwd, f)) for f in file_list], ignore_index=True)

# Remove columns named 'Unnamed: 0.1' and 'Unnamed: 0' first
df_concat = df_concat.drop(columns=['Unnamed: 0.1', 'Unnamed: 0'])

# Replace empty strings with NaN to uniformly represent missing values
df_concat.replace('', np.nan, inplace=True)
df_concat = df_concat.dropna(subset=df_concat.columns[1:], how='all')
df_concat.reset_index(drop=True, inplace=True)


df_concat.to_csv('/content/drive/MyDrive/CS 470 data/combined.csv', index=False)

df_concat

"""**GPA and GRE score Only for US applicants (GPA difficult to normalize and convert between different countries)**"""

# Filtering out 'international' from 'Citizenship' column, ensuring proper handling of NaN values
df_USONLY = df_concat[(~df_concat['Citizenship'].str.contains("international", case=False, na=False)) & df_concat['Citizenship'].notna()]
df_USONLY

# Make data frame with Major/School, GPA, GRE, and Application Cycle, clean unnecessary data
df_gpaandgre = df_USONLY[['Major_School', 'GPA', 'GRE_Stats', 'Attribute_1', 'Status_Date']].rename(columns={'Attribute_1': 'Application Cycle'})
df_gpaandgre = df_gpaandgre.dropna()
df_gpaandgre['GPA'] = df_gpaandgre['GPA'].str.replace('GPA ', '').astype(float)
df_gpaandgre = df_gpaandgre[df_gpaandgre['Application Cycle'] != 'Other']

# Simplify values to either Accept, Wailist, or Reject, remove other values
def simplify_status(status):
    if "accept" in status.lower():
        return "Accept"
    elif "wait listed" in status.lower():
        return "Waitlist"
    elif "interview" in status.lower():
        return None
    else:
        return "Reject"
df_gpaandgre['Status'] = df_gpaandgre['Status_Date'].apply(simplify_status)
df_gpaandgre = df_gpaandgre.dropna(subset=['Status'])

# Reset the index
df_gpaandgre.reset_index(drop=True, inplace=True)

# Export to File
df_gpaandgre.to_csv('/content/drive/MyDrive/CS 470 data/gpaandgre.csv', index=False)

df_gpaandgre

"""**Most popular Major_School**"""

major_school_counts = df_gpaandgre['Major_School'].value_counts().reset_index(name='Count')

major_school_counts.rename(columns={'index': 'Major_School'}, inplace=True)

major_school_counts.head()

"""**Curious about Chemistry**"""

# Filter the DataFrame for programs in Chemistry
chemistry_programs = df_gpaandgre[df_gpaandgre['Major_School'].str.contains("Chemistry", case=False)]

# Extract and standardize university names from the Major_School entries for easier comparison
chemistry_programs['University'] = chemistry_programs['Major_School'].apply(lambda x: x.split(',')[1] if ',' in x else x)

duplicate_chemistry_programs = chemistry_programs[chemistry_programs.duplicated(subset=['University'], keep=False)]
# Reset the index
duplicate_chemistry_programs.reset_index(drop=True, inplace=True)
# Export to File
duplicate_chemistry_programs.to_csv('/content/drive/MyDrive/CS 470 data/duplicate_chemistry_programs.csv', index=False)
duplicate_chemistry_programs

duplicate_chemistry_programs_count = duplicate_chemistry_programs['University'].value_counts().reset_index(name='Count')
duplicate_chemistry_programs_count.head()

"""# GPA and GRE rates for Yale University (this part is bugged, pls fix later)


"""

import matplotlib.pyplot as plt
import numpy as np
# Filter the dataset for Yale University applicants only, regardless of application cycle
yale_university_applicants = duplicate_chemistry_programs[duplicate_chemistry_programs['University'].str.contains("Yale")]

# Display the DataFrame for Yale University applicants
yale_university_applicants.reset_index(drop=True, inplace=True)
yale_university_applicants.to_csv('/content/drive/MyDrive/CS 470 data/yale_university_applicants.csv', index=False)
import matplotlib.pyplot as plt
yale_university_applicants['GRE_Stats'] = yale_university_applicants['GRE_Stats'].astype(str)
yale_university_applicants['GRE_Stats'] = yale_university_applicants['GRE_Stats'].str.extract(r'GRE (\d+)').astype(float)
yale_university_applicants

# fall_2021_applicants = yale_university_applicants[yale_university_applicants['Application Cycle'] == 'Fall 2021']
# fall_2021_applicants
selected_columns = yale_university_applicants[['GPA', 'GRE_Stats', 'Application Cycle', 'Status']]
selected_columns.reset_index(drop=True, inplace=True)
selected_columns

gpa = selected_columns['GPA'].values
statuses = selected_columns['Status'].values
gre_quantitative = selected_columns['GRE_Stats'].values

accepted_indices = np.where(selected_columns['Status'] == 'Accept')
rejected_indices = np.where(selected_columns['Status'] == 'Reject')

gpa_accepted = gpa[accepted_indices]
gre_quantitative_accepted = gre_quantitative[accepted_indices]

gpa_rejected = gpa[rejected_indices]
gre_quantitative_rejected = gre_quantitative[rejected_indices]

# Introduce jitter to the data for better visualization
jitter = 0.02  # Adjust this value as needed for the desired amount of jitter

gpa_accepted_jittered = gpa_accepted + np.random.normal(0, jitter, size=len(gpa_accepted))
gre_accepted_jittered = gre_quantitative_accepted + np.random.normal(0, jitter, size=len(gre_quantitative_accepted))

gpa_rejected_jittered = gpa_rejected + np.random.normal(0, jitter, size=len(gpa_rejected))
gre_rejected_jittered = gre_quantitative_rejected + np.random.normal(0, jitter, size=len(gre_quantitative_rejected))

# Prepare the plot
plt.figure(figsize=(14, 9))

# Plot accepted applicants with green points and jitter
plt.scatter(gpa_accepted_jittered, gre_accepted_jittered, color='green', label='Accepted', alpha=0.6)

# Plot rejected applicants with red points and jitter
plt.scatter(gpa_rejected_jittered, gre_rejected_jittered, color='red', label='Rejected', alpha=0.6)

# Adding plot title and labels
plt.title('Accepted and Rejected Applicants at Yale University: GPA vs. GRE Quantitative Scores with Jitter')
plt.xlabel('GPA')
plt.ylabel('GRE Quantitative Scores')
plt.legend(title='Application Status')
plt.grid(True)

# Display the plot
plt.show()